version: "2"
services:
  jobmanager:
    image: flink:1.15-scala_2.12
    expose:
      - "6123"
    ports:
      - "8081:8081"
    links:
      - kafka
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
  taskmanager:
    image: flink:1.15-scala_2.12
    depends_on:
      - jobmanager
    command: taskmanager
    links:
      - kafka
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 6
        parallelism.default: 1
  zookeeper:
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=true
      - ZOO_ENABLE_AUTH=no
  kafka:
    image: "bitnami/kafka:latest"
    links:
      - zookeeper
    ports:
      - "9093:9093"
    # kcat -b localhost:9093 -X security.protocol=SASL_PLAINTEXT -X sasl.mechanisms=PLAIN -X sasl.username=user -X sasl.password=bitnami -L
    environment:
      - BITNAMI_DEBUG=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CLIENT://:9093,
      # When deploying to production, the client advertised listener localhost needs to become the IP of the machine.
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,CLIENT://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CLIENT:SASL_PLAINTEXT
      - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAINTEXT
      - KAFKA_ZOOKEEPER_PROTOCOL=PLAINTEXT
      - KAFKA_CFG_AUTHORIZER_CLASS_NAME=kafka.security.authorizer.AclAuthorizer
      - KAFKA_CFG_SUPER_USERS=User:emily;User:ANONYMOUS;
      # - KAFKA_ZOOKEEPER_USER=kafka
      # - KAFKA_ZOOKEEPER_PASSWORD=kafka_password
      #Client credentials
      - KAFKA_CLIENT_USERS=emily
      - KAFKA_CLIENT_PASSWORDS=${KAFKA_PASSWORD}
      # - KAFKA_CERTIFICATE_PASSWORD=${KAFKA_PASSWORD}
      # - KAFKA_TLS_TYPE=JKS
      # - KAFKA_ZOOKEEPER_TLS_VERIFY_HOSTNAME=false
      # - KAFKA_CFG_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM=''

    depends_on:
      - zookeeper
    # volumes:
    #   - "./keystore/kafka.server.keystore.jks:/opt/bitnami/kafka/config/certs/kafka.keystore.jks:ro"
    #   - "./truststore/kafka.server.truststore.jks:/opt/bitnami/kafka/config/certs/kafka.truststore.jks:ro"
  mysql:
    # mysql://mysqluser:mysqlpw@34.141.31.101:3306/inventory
    # mysql://debezium:dbz@127.0.0.1:3306/inventory
    image: quay.io/debezium/example-mysql:1.9
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
  mysqltwo:
    # mysql://mysqluser:mysqlpw@34.141.31.101:3307/inventory
    # mysql://debezium:dbz@127.0.0.1:3306/inventory
    image: quay.io/debezium/example-mysql:1.9
    ports:
      - 3307:3306
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
  connect:
    image: quay.io/debezium/connect:latest
    ports:
      - 8083:8083
      - 5005:5005
    links:
      - kafka
      - mysql
      - mysqltwo
      - zookeeper
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_source_connect_statuses
      - STATUS_STORAGE_TOPIC=my_connect_statuses
